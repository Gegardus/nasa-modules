INTERACTIONS AND RESPONSIVE DESIGN

Basic animation with CSS keyframes

- Animations are the basis of great interactions. And we'll start adding them directly inside of our CSS modules. So where I want you to go is to this website, animate.style. And once you get to that, you can actually browse and take a look at what, the animations are here. So if you want to see what the flash animation is, you can see it directly here. So bounce, pulse, rubberBand and so on, so forth. So if you want to explore, go ahead and explore, what animations you'd like to add to the cards that we'll have into our application. So once you're ready. Let's go ahead and click on the GitHub logo right here. So this is going to bring us to the actual source of the repo and the source of the actual animation, so the CSS code that is used to do the animation. So once you're there, all you have to do is go into Source and then click on what type of animation you'd like to leverage. So in this case, we want to do an attention seeker. And then you can look directly into the CSS of what the animation you want to do. So if you wanted to do rubberBand, you can click on rubberBand CSS and take a look at rubberBand, like so. But in this case, I want to do flash. So, let's go ahead and take a look at flash. So this is the styles or the code for CSS that we have to add to our code to actually do this animation. So let's go ahead and copy that code like, so, and then let's go back to VS Code. And what we're going to do is paste that code directly inside of the grid item .module.css, right here. Because what we're doing in the card hover, we're actually calling on to the flash animation. So if you were to do something else, you would need to change the name of the animation here. So let's say you would do something like the rubberBand. The name of the key frame is what you want to grab here. So rubberBand would be the actual name that you will need to put in here. But in this case, we already put flash because I was planning ahead of time to do this and now I'm going to paste the code. And now I have everything I need to do the flash animation. So I'm going to save this and then go back to the website and reload. And now whenever I hover over any of the cards, it's going to do a flash animation. So if you were to do a rubberBand, they would do rubberBand and so on and so forth. So this is a quick way to add really cool automations to any of your applications inside of React, by leveraging animate.css. So we've done a base animation. Now we're ready to add some interactivity.

SVG loading with state

- Sometimes you need to have visuals changed based on events like a mouse click, or UI change, et cetera. This is exactly what we'll add to our website here. So let's get to it. So the first thing I want to do is minimize VScode for a second. And what I want to do is grab two files from the exercise files. So if you click on the exercise files and you click on resources, you'll have two JavaScript files called Badge and Explorer. So these are basically components that I've created with an SVG file inside of it. So basically code that creates an image. Didn't want to code this live on the screen for you, because it's not a course about that. So what we're going to do is copy those two files and then put them in the grid folder right here, like so. Perfect. So once we have that, let's go ahead and code our interactions. And the next thing we're going to do is first create the function inside the app dot JS, right here that will allow us to click and change the state. So what I'm going to do, just below the constructor right here. I'm going to create a method or function. That's going to be called update clicked, and we're going to pass an ID. And that function will basically take the state and create a copy. So we're going to create a brand new copy of the state with the object assign method, which is basically pure JavaScript. And then leverage that state copy and fax that ID. We're going to change the click to true, like so, so if you wonder what we're doing, if we take a look at the data again, each element has a clicked element and now it's false, but what we're going to do once we click on that particular element or card inside of our application, the click true the function here is going to change, picking up the ID, and I'm going to change click to true, like so. So in our state, this is going to change to true, if we were to click on the NASA acronym. And then we're going to make sure that we update our state inside of our application. So basically we're doing all of this through the copy of the state and not the actual state. And then we're setting the state with whatever we changed in the copy of our state. Okay, so once you have the method or function done, what you need to do at this point is to add it to our actual, or pass it down to the component that needs it. So let's go ahead and do that. So I'm going to pass it down to here. I'm going to call this updated click, and pass down the actual function that I created. So this, that update clicked, and we're going to bind this just to make sure, like so. Perfect. So now that we've passed it down to our grid, we're going to open the grid. And let's go ahead and open the main grid here, not the Explorer, the grid. Awesome. And then what we're going to do is in the grid, we're going to first create the method here. So update clicked, pass the ID and then basically leverage this dot props, because now we have the update click as a prop and pass the ID. Boom, we got it here. And now we need to add it to our grid item because we're clicking the item and not the grid itself. So basically we passed the function from the top level, all the way down to the actual component that needs it. So we're going to pass it down to the grid item now, the same way we did it on the app. So if you want to copy the code right here, so this code all the way to here, like so, this is exactly what you need to add right here, like so. Updated clicked this, updated clicked, bind this. And that's pretty much what we need to do on the grid. So you save this and now what we need to do is leverage that inside of the grid item. So change the styles as we click. So what am I going to do also is to add some styles to grid item. Not this one, but grid item dot module dot CSS. I'm going to add a badge. Little margin bottom, just to make sure when we have the badge, we have that style. Perfect. So that's something that I added when I actually tested the badge that we just added. So this badge here, just to make sure that it fits properly. So just add that it's going to look better. And again, all the styles are pretty much stuff that you can play on your own and make it your own, basically explore whatever you want. All right, so now we need to actually make the code or create the code. So when we click on this grid item, something's going to happen. So what we're going to do is add a few things here. So now we have access to the on click. That is the function that we can leverage in react. So when we click on something, do something and that's the function that's going to happen. So in this case, what we're going to do is leverage the updated click past the props, fact that ID, which basically means that we're passing the ID to the function and it's going to change at that point, what's going to happen. And when that happens, what you want to do is either add the Explorer or the badge. So basically when we click on the actual card, either add the badge or the Explorer SVG. So what we're going to do is do this, so props fact dot click question marks. So basically this is a NIF statement. So this is the ES6 and above version of an if statement. So if you clicked and it's true, add the Explorer component in here, otherwise add the badge. So the two SVGs that I created will basically show one or the other based on the actual state of that particular component here. So if it's true, it's going to show Explorer. If it's false, it's going to show the badge. But now what we need to do, because right now we've actually imported this. So we're going to have an error if I save this because I didn't import the badge and the Explorer. So we need to import those. So let's go ahead and do that and then import Explorer, from Explorer. So we have all of our elements for the click event. So let's go and test it. So I'm going to turn this or save this, and I'm going to check if everything is running okay, from a terminal perspective. And now I'm going to go to the browser. And as you can see, I have this SVG that shows up at the top if I click on it. Okay. So there seems to be a typo in the actual function that I created. It's not updated, but update clicked. So let's go and change the typo on that one, because I've actually pass, if you want to actually debug this yourself, you're going to see I've actually pass, update clicked, and not updated click. So that's my mistake. So let's go and make that change. Now it should be running. Okay. So everything's fine on the console. Let's go back to the browser and now everything's good. If I click on it now I've got this brand new SVG that shows up. So whenever I click on an element here, it's going to turn the actual state of that specific card to true, as opposed to false. And it's going to change the SVG. So good job. And let's move on.

Add final elements

- Now that we have completed a good portion of our project while learning how to use CSS modules, let's add a few items that will truly make our project pop. So the first thing we're going to do is go inside of the Exercise Files in the resources folder. And we have three files that I want you to bring into our project. First one being NASA MP3 which is basically a sound file that is a rocket launch. If you want to listen to it, you can actually open it, (audio plays) and you'll hear what it is. The second and the third are the shuttle and the smoke.mov. Now here's something that's going to be different than what we've done before. I don't know if you remember, before we actually copied and pasted the files, and they had to be inside of the source folder. Otherwise, React wouldn't recognize that. Well, that was when we actually were loading these files from a CSS file. So if we go back to our code, just to bring back some context into this. If we go into, they were in the rocket, I believe. Background, there you go. So we were loading these files from a CSS module. When they are in a CSS module, you need to have them inside of the source folder. If you need to load them anywhere else in the project, you can have them in the public folder and do basically what we were doing before, is actually do forward slash and the name of the file. So this is what we're going to do. So let me just close those two files here. Let's go back to that. Copy those files and then put them in the public folder. Like so. Close those folders. All right. So let's start by working on the rocket. So the first thing I want to show is the rocket. So I'm going to bring the JavaScript file and the CSS module. So the first thing I'm going to do is actually load the rocket right here. So I'm going to actually import also the CSS styles right away before I forget about it and do Rocket.module.css. So now that's loaded. Now let's load an image here inside of the rocket title. Let's do image. The source is basically the main folder, so shuttle.png. And you're always need to have alt when you do an image inside of React. Otherwise, it's going to give you an error. And then we're going to bring the modules CSS styles. And close the tag. Okay. So let's save that. Let's go and make sure that our image is loaded. So let's go into our project here. Let's scroll down, and we see the show. It's a bit big right now, so what we'll do is go back here and go inside of our CSS file. We're going to do some adjustments on the image. So let's do a class of image, do a position, relative. I don't know why I removed that. Bottom. Let's do minus 25 pixels with- And again, these are all values that I tested before, so I know these are going to look great. If you want to do your own, do your own. It's entirely fine to do that. Margin bottom. And you can actually do my own values and then play with them just to make sure that, you know, you can play with it, to do your own thing. So z index, I'm going to do 99 just to be sure that it sits on the very top of everything, okay? So now that's save. Let's continue working on our stuff. The next thing we're going to work on is the actual smoke. So let's go into the smoke JavaScript first. And we're going to do the same. So let's go and import our styles from Smoke.module.css. That's exactly what I've done here. Let's open it just to make sure it's Smoke.module.css. Yep. Because again, if you have a typo, React is going to react on you. (chuckles) All right. So the first thing I'm going to first add a className to the top div, which will be the smoke. And then inside of that div, I'm going to add a video, and that's the video we just loaded inside of our public folder here. So this one, smoke video. We're going to have some smoke, just going to be below the actual rocket. ClassName. And then we'll apply styles.video. Autoplay. Loop. Source, smoke.mov, And then close the tag. Whoops. That's not what I want. I want to actually do a closing tag like this. Okay. So now we have our video inside of our JavaScript file, now we need to apply some styles to this, just to make sure that we have proper styling for the smoke and also for the video. So let's go position, relative, bottom, zero pixel. Then we'll do a margin top of minus 500 pixels and then z index of 99 as well. So the rocket and the actual smoke is going be at the same level, as supposed to be one on top of each other. And now let's do the class for a video. We're going to do a width of 100%. Height, auto. And then opacity 0.5. Okay. So now that we've done all this, let's take a look at what it looks like. So let's go back. And first, I always check the console first, because if there's a major error, it's going to show in the console first. And then if it's really a style error or something that is minimal, mostly style, it's going to a actually show us the error on the browser. And we don't have any error. I'm just going to refresh just out of- And then scroll all the way down. And I have smoke with a rocket. Awesome. Now the last thing I want to do is actually add the audio file to this page. So when we load the page, it's going to play the launch, the rocket launch. So where you actually load that is in the HTML file. Let's go into the HTML file, like so. And what I'm going to do is basically go inside of the body, so line 29 and below, and remove all that commenting from React. Thank you very much for telling us all this. And then what I'm going to do is load that sound file. So it's fairly easy to load audio inside of an HTML file. If you don't want to do that, you can actually not do that code, because audio files is something that is kind of, some people like it, some people don't like it. But if you don't want to add it, that's completely fine. So now the way to do this is to do audio. And I'm going to do an autoplay on this on loop. So it's going to be annoying. And then inside of that audio, I actually determine what the source is. So the source of that audio is the NASA file. This guy here. So you want to make sure you also make high caps for all letters to match the name of the file. Otherwise, it's not going to load. Type audio, mpeg. And then close that tag. Okay. And now that we saved this, most likely React will start the audio file, so check the controller. If it doesn't, we will just refresh the page. Okay. So now let's check the browser. And I'm going to refresh just to be sure. And I'm going to scroll down, and I can see that the actual movie is not playing here. This is most likely a protection from your browser. So if you want to make sure that it's actually working, what you could do is change browsers. So for example, I have Safari, let's go to Safari and enter localhost 3000. Refresh. And the actual animation is working here. So the movie's working. So we have that part, but we don't have the sound or the actual NASA launch. And again, it's probably a protection from your browser, because most browsers, as of late, they protect from playing sounds from websites automatically. But there are settings that you can change inside of the browser. But I know for a fact that Firefox allows you to actually check this from the get go. So I'm going to open Firefox. And I'm going to enter localhost. (audio plays) And this is the setting question. So if I block audio video, it's going to stop if I refresh. I'm no longer going to have the audio playing. And the video is not playing as well. But if I want that to play, I can go to the settings, go here and allow audio and video and simply refresh. So this is basically a security setting from your browser that prevents from playing video or audio files automatically, because this is something that's annoying for a lot of users. And that's okay. But I just wanted to show you that there's a way to hear it. But FYI, if you truly want your MP3 file or sound files to play, there is a little trick on the web that I've seen on Stack Overflow, where if you changed the bit rate to 128 kilobytes per second, it's going to work. I'm not sure, I haven't tested it. But I like to have that security feature from the browser, because, personally, when I go to a website, if it plays something automatically, it's a little bit annoying for me. But in all cases, if you want to test your files, you can always do it here. So you can refresh (audio plays) and get that, and you're going to have the animation here as well. So. So now if you're like me, and you love space, this is one project to cherish and watch and hear several times over with the actual sound over. So let's move on.

Media queries and combining styles

- In CSS modules, you can do media queries the same way you've done it before with HTML. It'll work too. However, I want to show you an example of doing them externally of the component and then leveraging CX composition to add multiple styles to one element. So, let me demonstrate. So, the actual library that we're going to leverage to do that is this library, classnames. So, the way to install it, basically you do, npm install classnames, and I'm going to do that inside of the application. And I'm going to bring my terminal, stop the application with control + C, npm install class name. Like so. once you have that, let's go ahead and do npm start again, So we have our project running in the background. Everything is running fine, let's close the terminal. And then what I'm going to do is create inside of our grid a brand new module. So, right here, brand new file. And I'm going to call this Media .module .CSS. Like so. And basically what I'm going to do is start adding some media CSS styles right here. So, let's go ahead and do that. Again, these are my values. Feel free to do your own. For the grid, we're going to do something different at this width of a 1,024 pixels. We're going to do a column-gap of 10 pixels, column-count of two, and then padding, we're going to do 175 pixels by 10 pixels, 10 pixels, 10 pixels. Okay, so we got the first one. Now, we're going to do another media query for 768 pixels. (typing) Like so. And then for that one, we're going to basically replicate a lot of that code here so we can copy that. So, the column gap is going to remain. The column count is going to be one. And then here for the second value, we're going to do five pixels. And then for the last value, five pixels as well. We're also going to add something for the title and we're going to work on our styles for the title fairly shortly. And we're going to do a font-size of 3em, as opposed to 4em, which is the value that it has right now. Okay, so we got our module. Now let's compose these styles along with the styles that we already have for our grid. So, what I'm going to do is actually open the Grid.js file here. And I'm going to make one very simple change here. But the first thing we're going to do is make sure that we have all of our styles imported here. So, we have our grill module and we're going to import also mediastyles from our module, that we have right here. So, Media .module .css, Like so. And then we're going to use the brand new library we just installed, which is the classnames to compose those two styles or those two stylesheets into our section here. So, how do you go about that is fairly simple inside of react. So, here, as opposed to do just styles, we're going to do something else. So, I'm just going to hit return and actually remove all this, just to show you from scratch what it would look like, actually not hit return. So, you wouldn't use something in... Actually you need to import it first. So, we need to actually go here and import classnames. So, I'm going to use the letter CX from classnames, like so. Now we have access to it. And now in the actual styles here, I'm going to use CX, which is basically a function that allows to add multiple stylesheets into this particular function. So, basically what we're going to do is go ahead and add our styles. grid, comma and also media styles .grid. So, we're basically combining the two into the one. And all of our styles are going to be applied, like so. And save that. If you take a look at the terminal, everything is fine. And then also inside of the browser, everything is fine. So, the only way to see how it looks and I actually have... Right now, we don't see the title, but the grid will change if we actually shrink this. So, now we're at two. So, the media styles have been applied automatically. The title, we don't see it yet. So, that's why we're not seeing anything here. So, let's go ahead and make those changes for the title. So, I'm going to close the terminal, bring up the title, right here. The styles for title and also Title.js. And the first thing I'm going to do for title, is make a lot of changes here. So, the font size we're going to keep. Then what I'm going to do is add color, white. So, we can actually see the font. Position fixed, left 50%, transform translate, and we're going to do minus 50 percent. So, we're adding a little bit of an animation here, with 100% margin-bottom. And again, I'm just basically typing what you would see if you look into the exercise files. So, feel free to copy and paste or just type along with me. So, this is zero, zero, zero, 0.5. Margin- top zero, margin-bottom zero and padding top 0.67 em. And again, these are values that I actually played with for a little bit and figured out that these look great. Okay, well now we have that. And I'd like to add a media query for this one. So, I'm going to go for media query max-width. So, you can basically do that directly inside of the CSS module. So, you could basically add all your media queries directly here, as opposed to do in a separate file like I did. But I wanted to show you a way where you can combine multiple stylesheets into one classname, inside of a component. So, that's very useful when you want to start decomposing your code and make sure that it's very clean and you can easily find some styles that you apply to something by the name of the file. So... And again, it adds to the modularity of your project, 768 pixels, and I'm going to title, font-size 3em. And I believe I'm just repeating what I've done here. Yeah so, basically I wanted to show you, you can do it here, but you can also do it here. So, if you don't want to have it repeated in the code, and that's a good idea. Let's clean it here, and then let's add it directly into the file itself. Like so. Okay! So now we have our styles. The last thing we need to do is change our title and make sure that it says something that's related to NASA. So let's go and do, NASA facts. Perfect. So, we're done. So, let's go and make sure to test this. Bring up the terminal. Everything is good. as we scroll, The movie is working here, which is good. We don't hear the sound. That's probably a protection from react. You can click here, it changes everything. And then also media query wise, the title changes, the number of element changes, and I can basically see that my media queries are also working.